/****************************************************************************************************/
/-------------------------  WHAT IS TYPESCRIPT ------------------------------------------------------/

TypeScript is a programming language that is a superset of JavaScript, which means that any valid JavaScript code is also valid TypeScript code. It was developed by Microsoft and released as an open-source project. TypeScript adds static typing to JavaScript, providing developers with tools to write more scalable and maintainable code.

Key features of TypeScript include:

Static Typing: TypeScript introduces static typing to JavaScript, allowing developers to specify the types of variables, function parameters, and return types. This helps catch errors during development and provides better tooling support, such as autocompletion and code navigation.

Interfaces: TypeScript supports interfaces, which allow developers to define the structure of objects. This helps in writing more modular and maintainable code by explicitly specifying the expected shape of data.

Classes: TypeScript supports class-based object-oriented programming, which is not as prevalent in traditional JavaScript. Classes, along with interfaces, enable developers to use concepts like inheritance and encapsulation.

Enums: TypeScript has enum types, which allow developers to define a set of named constants. This can improve code readability and maintainability by giving meaningful names to specific values.

Generics: TypeScript supports generics, allowing developers to write functions and data structures that work with a variety of data types without sacrificing type safety.

Tooling Support: TypeScript comes with a rich set of tools, including the TypeScript compiler (tsc), which translates TypeScript code into plain JavaScript. Many popular code editors, such as Visual Studio Code, have built-in support for TypeScript, offering features like IntelliSense and error checking.

Compatibility: Since TypeScript is a superset of JavaScript, existing JavaScript code can be gradually migrated to TypeScript. This makes it easy for developers to adopt TypeScript in their projects incrementally.

Developers often use TypeScript in larger codebases or projects where strong typing can help catch errors early in the development process and improve overall code quality. The TypeScript compiler transpiles TypeScript code into JavaScript, which can then be executed in any JavaScript environment.

TypeScript is a development tool it is used to better type safety over the javascript. In comparison of saying it as a standalone language it is a development tool as it is entirely depenedent on JavaScript.
/*********************************************************************************************************/
/-------------------------------TYPES INFERENCES IN TYPESCRIPT--------------------------------------------/
Type inference is a feature in programming languages, including TypeScript, where the type of a variable is automatically determined by the compiler based on the value assigned to it. In other words, you don't have to explicitly specify the type of every variable; the compiler can infer the type from the context and the assigned values.

In TypeScript, type inference occurs during the compilation process. Here's a simple example to illustrate type inference:

typescript
Copy code
// Variable 'message' is inferred to have type string
let message = "Hello, TypeScript!";

// Variable 'count' is inferred to have type number
let count = 42;

// Variable 'isActive' is inferred to have type boolean
let isActive = true;
In the example above, TypeScript automatically infers the types of message, count, and isActive based on the values assigned to them. This allows you to write code that is both concise and statically typed.

Type inference becomes especially powerful when you work with complex data structures and function return types. For example:

typescript
Copy code
// Type of 'user' is inferred based on the object structure
let user = { id: 1, username: "john_doe", email: "john@example.com" };

// Type of 'result' is inferred based on the return value of the function
function add(x: number, y: number) {
  return x + y;
}
let result = add(3, 4);
In the above examples, TypeScript is able to infer the types of user and result based on the structure of the assigned values and the return type of the add function.

While type inference is convenient, there are situations where you might want to explicitly specify types, such as when the type cannot be easily inferred, or when you want to provide additional documentation for your code. TypeScript allows you to use explicit type annotations when needed, providing a balance between concise code and clear type information.
/*********************************************************************************************************************/
/---------------------------ANY--------------------------------------------------------------------------------------/
:In TypeScript, the any type is a special type that is used to represent values that could have any type. It essentially disables TypeScript's static type checking for a particular variable or expression, allowing it to be assigned and used in ways that might not be type-safe.

let dynamicValue: any = "This can be any type.";
console.log(dynamicValue); // Output: This can be any type.

dynamicValue = 42; // Now dynamicValue can hold a number.
console.log(dynamicValue); // Output: 42

dynamicValue = true; // Now dynamicValue can hold a boolean.
console.log(dynamicValue); // Output: true
/********************************************************************************************************/
// Never: the never types represents values which are never observed. In a return type, this means that the function throws an exception or terminates execution of the program 
// never also appears when typescript determines there's nothing left in a union 



